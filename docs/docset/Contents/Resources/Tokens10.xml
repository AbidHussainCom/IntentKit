<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MWTwitterHandler.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MWTwitterHandler</TokenIdentifier>
			<Abstract type="html">An instance of MWTwitterHandler performs Twitter-related tasks in third-party Twitter apps.</Abstract>
			<DeclaredIn>MWTwitterHandler.h</DeclaredIn>
            
			
			<NodeRef refid="10"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWTwitterHandler/setCallbackURL:</TokenIdentifier>
			<Abstract type="html">A URL to be opened by the third-party app when the action has been completed. Not all third-party apps support callbacks.</Abstract>
			<DeclaredIn>MWTwitterHandler.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSURL *callbackURL</Declaration>
			
			
			<Anchor>//api/name/callbackURL</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWTwitterHandler/callbackURL</TokenIdentifier>
			<Abstract type="html">A URL to be opened by the third-party app when the action has been completed. Not all third-party apps support callbacks.</Abstract>
			<DeclaredIn>MWTwitterHandler.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSURL *callbackURL</Declaration>
			
			
			<Anchor>//api/name/callbackURL</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MWTwitterHandler/callbackURL</TokenIdentifier>
			<Abstract type="html">A URL to be opened by the third-party app when the action has been completed. Not all third-party apps support callbacks.</Abstract>
			<DeclaredIn>MWTwitterHandler.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSURL *callbackURL</Declaration>
			
			
			<Anchor>//api/name/callbackURL</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWTwitterHandler/setActiveUser:</TokenIdentifier>
			<Abstract type="html">For Twitter clients that support multiple accounts, specifies the screen name of the account that should be used.</Abstract>
			<DeclaredIn>MWTwitterHandler.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *activeUser</Declaration>
			
			
			<Anchor>//api/name/activeUser</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWTwitterHandler/activeUser</TokenIdentifier>
			<Abstract type="html">For Twitter clients that support multiple accounts, specifies the screen name of the account that should be used.</Abstract>
			<DeclaredIn>MWTwitterHandler.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *activeUser</Declaration>
			
			
			<Anchor>//api/name/activeUser</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MWTwitterHandler/activeUser</TokenIdentifier>
			<Abstract type="html">For Twitter clients that support multiple accounts, specifies the screen name of the account that should be used.</Abstract>
			<DeclaredIn>MWTwitterHandler.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *activeUser</Declaration>
			
			
			<Anchor>//api/name/activeUser</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWTwitterHandler/showTweetWithId:</TokenIdentifier>
			<Abstract type="html">Shows a specific single tweet</Abstract>
			<DeclaredIn>MWTwitterHandler.h</DeclaredIn>
			
			<Declaration>- (MWActivityPresenter *)showTweetWithId:(NSString *)tweetId</Declaration>
			<Parameters>
				<Parameter>
					<Name>tweetId</Name>
					<Abstract type="html">The id of a status update</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A MWActivityPresenter to present modally if the user must pick a third-party app. Otherwise nil.</Abstract></ReturnValue>
			<Anchor>//api/name/showTweetWithId:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWTwitterHandler/showUserWithScreenName:</TokenIdentifier>
			<Abstract type="html">Shows the timeline of a given user</Abstract>
			<DeclaredIn>MWTwitterHandler.h</DeclaredIn>
			
			<Declaration>- (MWActivityPresenter *)showUserWithScreenName:(NSString *)screenName</Declaration>
			<Parameters>
				<Parameter>
					<Name>screenName</Name>
					<Abstract type="html">The screen name/handle of a Twitter user</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A MWActivityPresenter to present modally if the user must pick a third-party app. Otherwise nil.</Abstract></ReturnValue>
			<Anchor>//api/name/showUserWithScreenName:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWTwitterHandler/showUserWithId:</TokenIdentifier>
			<Abstract type="html">Shows the timeline of a given user</Abstract>
			<DeclaredIn>MWTwitterHandler.h</DeclaredIn>
			
			<Declaration>- (MWActivityPresenter *)showUserWithId:(NSString *)userId</Declaration>
			<Parameters>
				<Parameter>
					<Name>userId</Name>
					<Abstract type="html">The user id of a Twitter user</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A MWActivityPresenter to present modally if the user must pick a third-party app. Otherwise nil.</Abstract></ReturnValue>
			<Anchor>//api/name/showUserWithId:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWTwitterHandler/showTimeline</TokenIdentifier>
			<Abstract type="html">Shows the timeline of the active user</Abstract>
			<DeclaredIn>MWTwitterHandler.h</DeclaredIn>
			
			<Declaration>- (MWActivityPresenter *)showTimeline</Declaration>
			
			<ReturnValue><Abstract type="html">A MWActivityPresenter to present modally if the user must pick a third-party app. Otherwise nil.</Abstract></ReturnValue>
			<Anchor>//api/name/showTimeline</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWTwitterHandler/showMentions</TokenIdentifier>
			<Abstract type="html">Shows @mentions for the active user</Abstract>
			<DeclaredIn>MWTwitterHandler.h</DeclaredIn>
			
			<Declaration>- (MWActivityPresenter *)showMentions</Declaration>
			
			<ReturnValue><Abstract type="html">A MWActivityPresenter to present modally if the user must pick a third-party app. Otherwise nil.</Abstract></ReturnValue>
			<Anchor>//api/name/showMentions</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWTwitterHandler/showDirectMessages</TokenIdentifier>
			<Abstract type="html">Shows DMs for the active user</Abstract>
			<DeclaredIn>MWTwitterHandler.h</DeclaredIn>
			
			<Declaration>- (MWActivityPresenter *)showDirectMessages</Declaration>
			
			<ReturnValue><Abstract type="html">A MWActivityPresenter to present modally if the user must pick a third-party app. Otherwise nil.</Abstract></ReturnValue>
			<Anchor>//api/name/showDirectMessages</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWTwitterHandler/searchFor:</TokenIdentifier>
			<Abstract type="html">Searches for tweets or users</Abstract>
			<DeclaredIn>MWTwitterHandler.h</DeclaredIn>
			
			<Declaration>- (MWActivityPresenter *)searchFor:(NSString *)query</Declaration>
			<Parameters>
				<Parameter>
					<Name>query</Name>
					<Abstract type="html">A string to search for</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A MWActivityPresenter to present modally if the user must pick a third-party app. Otherwise nil.</Abstract></ReturnValue>
			<Anchor>//api/name/searchFor:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWTwitterHandler/tweetMessage:</TokenIdentifier>
			<Abstract type="html">Opens a window to compose a new tweet</Abstract>
			<DeclaredIn>MWTwitterHandler.h</DeclaredIn>
			
			<Declaration>- (MWActivityPresenter *)tweetMessage:(NSString *)message</Declaration>
			<Parameters>
				<Parameter>
					<Name>message</Name>
					<Abstract type="html">The content to pre-populate the input box with</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A MWActivityPresenter to present modally if the user must pick a third-party app. Otherwise nil.</Abstract></ReturnValue>
			<Anchor>//api/name/tweetMessage:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWTwitterHandler/tweetMessage:inReplyTo:</TokenIdentifier>
			<Abstract type="html">Opens a window to compose a new relpy</Abstract>
			<DeclaredIn>MWTwitterHandler.h</DeclaredIn>
			
			<Declaration>- (MWActivityPresenter *)tweetMessage:(NSString *)message inReplyTo:(NSString *)replyId</Declaration>
			<Parameters>
				<Parameter>
					<Name>message</Name>
					<Abstract type="html">The content to pre-populate the input box with</Abstract>
				</Parameter><Parameter>
					<Name>replyId</Name>
					<Abstract type="html">The id of a tweet that the new tweet is a reply to.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A MWActivityPresenter to present modally if the user must pick a third-party app. Otherwise nil.</Abstract></ReturnValue>
			<Anchor>//api/name/tweetMessage:inReplyTo:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
        
	</File>
</Tokens>
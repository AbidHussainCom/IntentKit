<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MWHandler.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MWHandler</TokenIdentifier>
			<Abstract type="html">MWHandler is the base class for shared groups of behavior for a class of third-party applications. You cannot use the MWHandler class directly. It instead defines the common interface and behavioral structure for all its subclasses.</Abstract>
			<DeclaredIn>MWHandler.h</DeclaredIn>
            
			
			<NodeRef refid="5"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWHandler/setAlwaysShowActivityView:</TokenIdentifier>
			<Abstract type="html">By default, if there is only one valid application, a MWHandler will automatically open that app instead of showing a UIActivityViewController. Setting this to YES overrides that behavior and always shows an activity view.
    
  This is mostly useful for demo purposes (e.g. running in the simulator). </Abstract>
			<DeclaredIn>MWHandler.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL alwaysShowActivityView</Declaration>
			
			
			<Anchor>//api/name/alwaysShowActivityView</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWHandler/alwaysShowActivityView</TokenIdentifier>
			<Abstract type="html">By default, if there is only one valid application, a MWHandler will automatically open that app instead of showing a UIActivityViewController. Setting this to YES overrides that behavior and always shows an activity view.
    
  This is mostly useful for demo purposes (e.g. running in the simulator). </Abstract>
			<DeclaredIn>MWHandler.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL alwaysShowActivityView</Declaration>
			
			
			<Anchor>//api/name/alwaysShowActivityView</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MWHandler/alwaysShowActivityView</TokenIdentifier>
			<Abstract type="html">By default, if there is only one valid application, a MWHandler will automatically open that app instead of showing a UIActivityViewController. Setting this to YES overrides that behavior and always shows an activity view.
    
  This is mostly useful for demo purposes (e.g. running in the simulator). </Abstract>
			<DeclaredIn>MWHandler.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL alwaysShowActivityView</Declaration>
			
			
			<Anchor>//api/name/alwaysShowActivityView</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWHandler/setActivities:</TokenIdentifier>
			<Abstract type="html">An array of MWActivity objects that represent all apps, regardless of whether they are available or relevant</Abstract>
			<DeclaredIn>MWHandler.h</DeclaredIn>
			
			<Declaration>@property (strong, readonly) NSArray *activities</Declaration>
			
			
			<Anchor>//api/name/activities</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWHandler/activities</TokenIdentifier>
			<Abstract type="html">An array of MWActivity objects that represent all apps, regardless of whether they are available or relevant</Abstract>
			<DeclaredIn>MWHandler.h</DeclaredIn>
			
			<Declaration>@property (strong, readonly) NSArray *activities</Declaration>
			
			
			<Anchor>//api/name/activities</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MWHandler/activities</TokenIdentifier>
			<Abstract type="html">An array of MWActivity objects that represent all apps, regardless of whether they are available or relevant</Abstract>
			<DeclaredIn>MWHandler.h</DeclaredIn>
			
			<Declaration>@property (strong, readonly) NSArray *activities</Declaration>
			
			
			<Anchor>//api/name/activities</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWHandler/canPerformCommand:</TokenIdentifier>
			<Abstract type="html">Returns whether or not an action can be performed at all.</Abstract>
			<DeclaredIn>MWHandler.h</DeclaredIn>
			
			<Declaration>- (BOOL)canPerformCommand:(NSString *)command</Declaration>
			<Parameters>
				<Parameter>
					<Name>command</Name>
					<Abstract type="html">The name of a command to perform, corresponding with the keys in each application&apos;s plist.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the user has at least one application installed that responds to the given command.</Abstract></ReturnValue>
			<Anchor>//api/name/canPerformCommand:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MWHandler/performCommand:withArguments:</TokenIdentifier>
			<Abstract type="html">Opens a third-party application to perform some task.
If there is only one application installed that can respond to that command, it will open that app with the correct URL.
Otherwise, it will create a UIActivityViewController to prompt the user to pick an app.</Abstract>
			<DeclaredIn>MWHandler.h</DeclaredIn>
			
			<Declaration>- (UIActivityViewController *)performCommand:(NSString *)command withArguments:(NSDictionary *)args</Declaration>
			<Parameters>
				<Parameter>
					<Name>command</Name>
					<Abstract type="html">The name of a command to perform, corresponding with keys in each application&apos;s plist.</Abstract>
				</Parameter><Parameter>
					<Name>args</Name>
					<Abstract type="html">The dictionary of arguments used to construct a URL based on the templates defined for each URL scheme.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">If the user should be prompted to select an application, returns a UIActivityViewController to present modally. Otherwise nil.</Abstract></ReturnValue>
			<Anchor>//api/name/performCommand:withArguments:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
        
	</File>
</Tokens>